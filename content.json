{"meta":{"title":"Elvis's tech notes | 筆記小本本","subtitle":null,"description":null,"author":"ElvisLiao","url":"http://yoursite.com"},"pages":[{"title":"Javascript","date":"2018-01-18T08:33:49.000Z","updated":"2018-01-18T08:33:49.602Z","comments":true,"path":"Javascript/index.html","permalink":"http://yoursite.com/Javascript/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-01-18T08:44:25.000Z","updated":"2018-01-18T08:44:25.203Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"了解closure、callback以及promise(1)","slug":"了解closures、callbacks以及promises","date":"2018-01-23T03:00:03.000Z","updated":"2018-01-23T09:32:46.111Z","comments":true,"path":"2018/01/23/了解closures、callbacks以及promises/","link":"","permalink":"http://yoursite.com/2018/01/23/了解closures、callbacks以及promises/","excerpt":"","text":"本來想要把這三個感覺起來類似的東西寫在一起，但發現我實在太囉嗦了，實在很難一言兩語來解釋完，所以分篇介紹。 相信或多或少都會看到closure、callback以及promise，這些名詞，也是在面試過程中常會被考到的題目，可以說是測驗懂不懂Javascript這個語言的一個小小分水嶺，沒使用、沒熟讀過的馬上腦帶就一片空白。 closure(閉包)首先，先看一下在MDN上面的解釋： 閉包（Closure）是函式的組合，以及該宣告函式所包含的作用域環境（lexical environment）。 例子： 12345678function init() &#123; var name = &quot;Mozilla&quot;; // name 是個由 init 建立的局部變數 function displayName() &#123; // displayName() 是內部函式，一個閉包 alert(name); // 使用了父函式宣告的變數 &#125; displayName();&#125;init(); init() 建立了局部變數 name 與 displayName() 函式。displayName() 是個在 init() 內定義的內部函式，且只在該函式內做動。displayName() 自己並沒有局部變數，不過它可以訪問外面函式的變數、因而能取用在父函式宣告的變數 name。 好，我還是白話一點好了。","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://yoursite.com/categories/Javascript/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"}],"keywords":[{"name":"Javascript","slug":"Javascript","permalink":"http://yoursite.com/categories/Javascript/"}]},{"title":"利用HEXO架設屬於自己的BLOG","slug":"利用HEXO架設專屬自己的BLOG","date":"2018-01-22T08:33:02.000Z","updated":"2018-01-22T09:41:22.643Z","comments":true,"path":"2018/01/22/利用HEXO架設專屬自己的BLOG/","link":"","permalink":"http://yoursite.com/2018/01/22/利用HEXO架設專屬自己的BLOG/","excerpt":"","text":"過去曾用過WordPress、logdown等等來撰寫文章，但都一直無法讓自己滿意，不是架設太複雜就是很難去客製化自己的主題。基本主題東改改西改改，花費的時間一多，就喪失了隨手寫Blog的意義了。 在一個偶然的情況下，逛到一個技術部落格，就是使用HEXO來實現，簡潔、快速架設、美觀的優點正好是我需要的，於是這個站就這麼產生了。 安裝 Hexo：12345npm install hexo-cli -ghexo init blogcd blognpm installhexo server 如果有任何的問題，Hexo官網也都有很詳細的操作文件可以參考，只要照著步驟都可以完成。 另外，主題方面，要找到自己喜歡的真不容易。好險Hexo提供了很多Theme讓人套用，如果你覺的自己客製出來的主題很厲害，也都可以pull request。 主題套用方法，一樣可以參考操作手冊，一切都是非常的懶人非常簡單。 發布至GithubHexo deploy可以部署到很多個平台，具體可以參考這個連結。如果部署到github，需要在配置文件_config.xml中作如下修改： 12345deploy: type: git repo: &lt;repository url&gt; branch: [branch] message: [message] 常用指令： hexo generate (hexo g) 生成靜態文件，會在當前目錄下生成一個新的叫做public的文件夾。 hexo server (hexo s) 啟動Local web服務，用於Hexo的預覽 hexo deploy (hexo d) 部署到遠端（比如github, heroku等平台） 這邊有一個我常用的組合指令： hexo clean &amp;&amp; hexo d -g 它就是將上面一整串合併在一起，然後產生靜態檔，最後發布到github上。","categories":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"}],"keywords":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}]}]}